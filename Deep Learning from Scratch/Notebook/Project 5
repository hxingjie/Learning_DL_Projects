# dataset/mnist.py, dataset/mnist.pkl,
# dataset/t10k-images-idx3-ubyte.gz, dataset/t10k-labels-idx1-ubyte.gz,
# dataset/train-images-idx3-ubyte.gz, dataset/train-labels-idx1-ubyte.gz
import numpy as np
from collections import OrderedDict
from dataset.mnist import load_mnist


class Relu:
    def __init__(self):
        self.mask = None

    def forward(self, x):
        self.mask = (x <= 0)  # x中小于等于0的位置置为True
        out = x.copy()
        out[self.mask] = 0  # 将self.mask中为True的位置置为0
        return out

    def backward(self, dout):
        dout[self.mask] = 0
        dx = dout
        return dx


class Sigmoid:
    def __init__(self):
        self.out = None

    def forward(self, x):
        out = 1 / (1 + np.exp(-x))
        self.out = out

        return out

    def backward(self, dout):
        dx = dout * self.out * (1.0 - self.out)

        return dx


class Affine:
    def __init__(self, W, b):
        self.W = W
        self.b = b
        self.x = None
        self.original_x_shape = None
        self.dW = None
        self.db = None

    def forward(self, x):
        self.original_x_shape = x.shape
        x = x.reshape(x.shape[0], -1)
        self.x = x
        out = np.dot(self.x, self.W) + self.b
        return out

    def backward(self, dout):
        dx = np.dot(dout, self.W.T)
        self.dW = np.dot(self.x.T, dout)
        self.db = np.sum(dout, axis=0)
        dx = dx.reshape(*self.original_x_shape)
        return dx


def softmax(x):
    if x.ndim == 2:  # x: (2, 3)
        x = x.T  # x: (3, 2)
        x -= np.max(x, axis=0)  # x: (3, 2)
        y = np.exp(x) / np.sum(np.exp(x), axis=0)  # y: (3, 2)
        return y.T  # y: (2, 3)

    x -= np.max(x)
    return np.exp(x) / np.sum(np.exp(x))


def cross_entropy_error(y, t):
    if y.ndim == 1:
        t = t.reshape(1, t.size)
        y = y.reshape(1, y.size)

    if t.size == y.size:  # t is one-hot-vector
        t = np.argmax(t, axis=1)

    batch_size = y.shape[0]
    return -np.sum( np.log(y[np.arange(batch_size), t] + 1e-7) ) / batch_size


class SoftmaxWithLoss:
    def __init__(self):
        self.y = None
        self.t = None
        self.loss = None

    def forward(self, x, t):
        self.y = softmax(x)
        self.t = t
        self.loss = cross_entropy_error(self.y, self.t)

        return self.loss

    def backward(self, dout=1):
        batch_size = self.t.shape[0]
        dx = (self.y - self.t) / batch_size
        return dx


class TwoLayerNet:
    def __init__(self, input_size, hidden_size, out_size,
                 weight_init_std=0.01):
        self.params = {}
        self.params['W1'] = weight_init_std * np.random.randn(input_size, hidden_size)
        self.params['b1'] = np.zeros(hidden_size)
        self.params['W2'] = weight_init_std * np.random.randn(hidden_size, out_size)
        self.params['b2'] = np.zeros(out_size)

        self.layers = OrderedDict()
        self.layers['Affine1'] = Affine(self.params['W1'], self.params['b1'])
        self.layers['Relu1'] = Relu()
        self.layers['Affine2'] = Affine(self.params['W2'], self.params['b2'])
        self.lastLayer = SoftmaxWithLoss()

    def predict(self, x):
        for layer in self.layers.values():
            x = layer.forward(x)

        return x

    def loss(self, x, t):
        y = self.predict(x)
        return self.lastLayer.forward(y, t)

    def accuracy(self, x, t):
        y = self.predict(x)
        y = np.argmax(y, axis=1)
        if t.ndim != 1:
            t = np.argmax(t, axis=1)

        acc = np.sum(y == t) / float(x.shape[0])
        return acc

    def gradient(self, x, t):
        self.loss(x, t)

        dout = 1
        dout = self.lastLayer.backward(dout)

        layers = list(self.layers.values())
        layers.reverse()
        for layer in layers:
            dout = layer.backward(dout)

        grads = {}
        grads['W1'] = self.layers['Affine1'].dW
        grads['b1'] = self.layers['Affine1'].db
        grads['W2'] = self.layers['Affine2'].dW
        grads['b2'] = self.layers['Affine2'].db

        return grads

    def get_numerical_gradient(self, param, x, t):
        h = 1e-4  # 0.0001

        grad = np.zeros_like(param)

        it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])
        while not it.finished:
            idx = it.multi_index
            tmp_val = param[idx]
            param[idx] = tmp_val + h
            fxh1 = self.loss(x, t)  # f(x+h)

            param[idx] = tmp_val - h
            fxh2 = self.loss(x, t)  # f(x-h)
            grad[idx] = (fxh1 - fxh2) / (2 * h)

            param[idx] = tmp_val  # 还原值
            it.iternext()

        return grad

    def numerical_gradient(self, x, t):
        grads = {}
        grads['W1'] = self.get_numerical_gradient(self.params['W1'], x, t)
        grads['b1'] = self.get_numerical_gradient(self.params['b1'], x, t)
        grads['W2'] = self.get_numerical_gradient(self.params['W2'], x, t)
        grads['b2'] = self.get_numerical_gradient(self.params['b2'], x, t)

        return grads

(x_train, t_train), (x_test, t_test) \
    = load_mnist(normalize=True, one_hot_label=True)

net = TwoLayerNet(input_size=784, hidden_size=50, out_size=10)

# gradient check
x_batch = x_train[:3]
t_batch = t_train[:3]

grad_backprop = net.gradient(x_batch, t_batch)
grad_numerical = net.numerical_gradient(x_batch, t_batch)

for key in grad_numerical:
    diff = np.average( np.abs(grad_numerical[key] - grad_backprop[key]) )
    print(f"{key}: {diff}")

epochs = 1000
train_size = x_train.shape[0]
batch_size = 100
lr = 0.1
train_loss_list = []
train_acc_list = []
test_acc_list = []

for i in range(epochs):
    batch_mask = np.random.choice(train_size, batch_size)
    x_batch = x_train[batch_mask]
    t_batch = t_train[batch_mask]

    grad = net.gradient(x_batch, t_batch)

    for key in ('W1', 'b1', 'W2', 'b2'):
        net.params[key] -= lr * grad[key]

    loss = net.loss(x_batch, t_batch)
    train_loss_list.append(loss)

    if (i+1) % 5 == 0:
        train_acc = net.accuracy(x_train, t_train)
        train_acc_list.append(train_acc)

        test_acc = net.accuracy(x_test, t_test)
        test_acc_list.append(test_acc)

        print(f"train accuracy: {train_acc}, test accuracy: {test_acc}")
